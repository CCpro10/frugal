// +build !noasm !appengine
// Code generated by asm2asm, DO NOT EDIT.

#include "go_asm.h"
#include "funcdata.h"
#include "textflag.h"

TEXT Â·__native_entry__(SB), NOSPLIT, $0
	NO_LOCAL_POINTERS
	LONG $0xf9058d48; WORD $0xffff; BYTE $0xff // leaq         $-7(%rip), %rax
	MOVQ AX, 8(SP)
	RET

_do_skip:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5741                               // pushq        %r15
	WORD $0x5641                               // pushq        %r14
	WORD $0x5541                               // pushq        %r13
	WORD $0x5441                               // pushq        %r12
	BYTE $0x53                                 // pushq        %rbx
	MOVL $0, 4(DI)
	MOVB CX, 0(DI)
	XORL R8, R8
	LONG $0x6e0d8d4c; WORD $0x0003; BYTE $0x00 // leaq         $878(%rip), %r9  /* LJTI0_0(%rip) */
	LONG $0xab1d8d4c; WORD $0x0003; BYTE $0x00 // leaq         $939(%rip), %r11  /* _SkipSizeFixed(%rip) */
	XORL R14, R14
	JMP  LBB0_3

LBB0_8:
	DECL R8

LBB0_9:
	ADDL  AX, R14
	WORD  $0x9848 // cltq
	TESTL R8, R8
	JS    LBB0_50

LBB0_58:
	ADDQ AX, SI

LBB0_2:
	MOVL    R8, AX
	MOVBLZX 0(DI)(AX*8), CX

LBB0_3:
	MOVL    $-1, AX
	LEAL    1(CX), BX
	CMPB    BX, $16
	JA      LBB0_60
	MOVL    R8, R10
	MOVBLZX BX, BX
	MOVLQSX 0(R9)(BX*4), BX
	ADDQ    R9, BX
	JMP     BX

LBB0_5:
	MOVBLZX CX, AX
	MOVBLSX 0(AX)(R11*1), AX
	SUBL    AX, DX
	JL      LBB0_59
	MOVL    4(DI)(R10*8), CX
	TESTL   CX, CX
	JE      LBB0_8
	DECL    CX
	MOVL    CX, 4(DI)(R10*8)
	JMP     LBB0_9

LBB0_10:
	CMPL    DX, $5
	JL      LBB0_59
	MOVBLZX 0(SI), R15
	MOVBLZX R15, R12
	LONG    $0x310d8d48; WORD $0x0004; BYTE $0x00 // leaq         $1073(%rip), %rcx  /* _WireTags(%rip) */
	CMPB    0(R12)(CX*1), $0
	JE      LBB0_60
	MOVL    1(SI), CX
	TESTL   CX, CX
	JE      LBB0_39
	BSWAPL  CX
	MOVBLSX 0(R12)(R11*1), AX
	TESTL   AX, AX
	JE      LBB0_1
	IMULL   AX, CX
	ADDL    $5, CX
	MOVL    $-2, AX
	SUBL    CX, DX
	JGE     LBB0_21
	JMP     LBB0_60

LBB0_16:
	MOVBLZX 2(DI)(R10*8), AX
	MOVL    4(DI)(R10*8), CX
	TESTL   CX, CX
	JE      LBB0_41
	DECL    CX
	MOVL    CX, 4(DI)(R10*8)
	TESTB   $1, CX
	MOVBLZX 1(DI)(R10*8), CX
	MOVBLZX AX, AX
	WORD    $0x440f; BYTE $0xc1 // cmovel       %ecx, %eax
	CMPL    R8, $65534
	JLE     LBB0_42
	JMP     LBB0_18

LBB0_19:
	MOVL   $-2, AX
	CMPL   DX, $4
	JL     LBB0_60
	MOVL   0(SI), CX
	BSWAPL CX
	ADDL   $4, CX
	SUBL   CX, DX
	JL     LBB0_60

LBB0_21:
	MOVL  4(DI)(R10*8), AX
	TESTL AX, AX
	JE    LBB0_22

LBB0_37:
	DECL AX
	MOVL AX, 4(DI)(R10*8)
	JMP  LBB0_38

LBB0_23:
	TESTL   DX, DX
	JLE     LBB0_59
	MOVBLZX 0(SI), CX
	TESTQ   CX, CX
	JE      LBB0_43
	LONG    $0x6c1d8d48; WORD $0x0003; BYTE $0x00 // leaq         $876(%rip), %rbx  /* _WireTags(%rip) */
	CMPB    0(CX)(BX*1), $0
	JE      LBB0_60
	MOVBQSX 0(CX)(R11*1), BX
	TESTQ   BX, BX
	JE      LBB0_51
	ADDQ    $3, BX
	MOVL    $-2, AX
	SUBL    BX, DX
	JL      LBB0_60
	ADDL    BX, R14
	ADDQ    BX, SI
	JMP     LBB0_2

LBB0_29:
	CMPL    DX, $6
	JL      LBB0_59
	MOVBLZX 0(SI), R15
	MOVBLZX R15, CX
	LONG    $0x201d8d48; WORD $0x0003; BYTE $0x00 // leaq         $800(%rip), %rbx  /* _WireTags(%rip) */
	CMPB    0(CX)(BX*1), $0
	JE      LBB0_60
	MOVBLZX 1(SI), R12
	MOVBLZX R12, R13
	CMPB    0(R13)(BX*1), $0
	JE      LBB0_60
	MOVL    2(SI), AX
	TESTL   AX, AX
	JE      LBB0_45
	BSWAPL  AX
	MOVQ    R11, BX
	MOVBLSX 0(CX)(R11*1), R11
	TESTL   R11, R11
	JE      LBB0_47
	MOVBLZX 0(R13)(BX*1), CX
	TESTB   CX, CX
	JE      LBB0_47
	MOVBLSX CX, CX
	ADDL    R11, CX
	IMULL   AX, CX
	ADDL    $6, CX
	MOVL    $-2, AX
	SUBL    CX, DX
	JL      LBB0_60
	MOVQ    BX, R11
	MOVL    4(DI)(R10*8), AX
	TESTL   AX, AX
	JNE     LBB0_37

LBB0_22:
	DECL R8

LBB0_38:
	ADDL    CX, R14
	MOVLQSX CX, AX
	TESTL   R8, R8
	JNS     LBB0_58
	JMP     LBB0_50

LBB0_39:
	MOVL  4(DI)(R10*8), AX
	TESTL AX, AX
	JE    LBB0_48
	DECL  AX
	MOVL  AX, 4(DI)(R10*8)
	JMP   LBB0_49

LBB0_1:
	MOVB R15, 0(DI)(R10*8)
	DECL CX
	MOVL CX, 4(DI)(R10*8)
	ADDL $-5, DX
	ADDL $5, R14
	ADDQ $5, SI
	JMP  LBB0_2

LBB0_41:
	DECL R8
	CMPL R8, $65534
	JG   LBB0_18

LBB0_42:
	INCL R8
	MOVL R8, CX
	MOVB AX, 0(DI)(CX*8)
	MOVL $0, 4(DI)(CX*8)
	JMP  LBB0_2

LBB0_43:
	MOVL  4(DI)(R10*8), AX
	TESTL AX, AX
	JE    LBB0_54
	DECL  AX
	MOVL  AX, 4(DI)(R10*8)
	JMP   LBB0_55

LBB0_45:
	MOVL  4(DI)(R10*8), AX
	TESTL AX, AX
	JE    LBB0_56
	DECL  AX
	MOVL  AX, 4(DI)(R10*8)
	JMP   LBB0_57

LBB0_47:
	MOVB R15, 1(DI)(R10*8)
	MOVB R12, 2(DI)(R10*8)
	MOVB $-1, 0(DI)(R10*8)
	LEAL -1(AX)(AX*1), AX
	MOVL AX, 4(DI)(R10*8)
	ADDL $-6, DX
	ADDL $6, R14
	ADDQ $6, SI
	MOVQ BX, R11
	JMP  LBB0_2

LBB0_48:
	DECL R8

LBB0_49:
	ADDL  $-5, DX
	ADDL  $5, R14
	MOVL  $5, AX
	TESTL R8, R8
	JNS   LBB0_58
	JMP   LBB0_50

LBB0_51:
	MOVL $-2, AX
	CMPL DX, $4
	JL   LBB0_60
	CMPL R8, $65534
	JG   LBB0_18
	INCL R8
	MOVL R8, AX
	MOVB CX, 0(DI)(AX*8)
	MOVL $0, 4(DI)(AX*8)
	ADDL $-3, DX
	ADDL $3, R14
	ADDQ $3, SI
	JMP  LBB0_2

LBB0_54:
	DECL R8

LBB0_55:
	DECL  DX
	INCL  R14
	MOVL  $1, AX
	TESTL R8, R8
	JNS   LBB0_58
	JMP   LBB0_50

LBB0_56:
	DECL R8

LBB0_57:
	ADDL  $-6, DX
	ADDL  $6, R14
	MOVL  $6, AX
	TESTL R8, R8
	JNS   LBB0_58

LBB0_50:
	MOVL R14, AX
	JMP  LBB0_60

LBB0_59:
	MOVL $-2, AX

LBB0_60:
	BYTE $0x5b   // popq         %rbx
	WORD $0x5c41 // popq         %r12
	WORD $0x5d41 // popq         %r13
	WORD $0x5e41 // popq         %r14
	WORD $0x5f41 // popq         %r15
	BYTE $0x5d   // popq         %rbp
	RET

LBB0_18:
	MOVL $-3, AX
	JMP  LBB0_60

// .set L0_0_set_16, LBB0_16-LJTI0_0
// .set L0_0_set_60, LBB0_60-LJTI0_0
// .set L0_0_set_5, LBB0_5-LJTI0_0
// .set L0_0_set_19, LBB0_19-LJTI0_0
// .set L0_0_set_23, LBB0_23-LJTI0_0
// .set L0_0_set_29, LBB0_29-LJTI0_0
// .set L0_0_set_10, LBB0_10-LJTI0_0
LJTI0_0:
	LONG $0xfffffd4c // .long L0_0_set_16
	LONG $0xffffffee // .long L0_0_set_60
	LONG $0xffffffee // .long L0_0_set_60
	LONG $0xfffffcd9 // .long L0_0_set_5
	LONG $0xfffffcd9 // .long L0_0_set_5
	LONG $0xfffffcd9 // .long L0_0_set_5
	LONG $0xffffffee // .long L0_0_set_60
	LONG $0xfffffcd9 // .long L0_0_set_5
	LONG $0xffffffee // .long L0_0_set_60
	LONG $0xfffffcd9 // .long L0_0_set_5
	LONG $0xffffffee // .long L0_0_set_60
	LONG $0xfffffcd9 // .long L0_0_set_5
	LONG $0xfffffd87 // .long L0_0_set_19
	LONG $0xfffffdbd // .long L0_0_set_23
	LONG $0xfffffe0c // .long L0_0_set_29
	LONG $0xfffffcfb // .long L0_0_set_10
	LONG $0xfffffcfb // .long L0_0_set_10

_SkipSizeFixed:
	QUAD $0x0002000801010000; WORD $0x0004; BYTE $0x08 // .ascii 11, '\x00\x00\x01\x01\x08\x00\x02\x00\x04\x00\x08'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000; BYTE $0x00                       // .space 5, '\x00\x00\x00\x00\x00'

_WireTags:
	QUAD $0x0001000101010000; QUAD $0x0101010101010001 // .ascii 16, '\x00\x00\x01\x01\x01\x00\x01\x00\x01\x00\x01\x01\x01\x01\x01\x01'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

TEXT Â·__do_skip(SB), NOSPLIT, $48 - 0
	LEAQ Â·__native_entry__+13(SB), AX // _do_skip
	JMP  AX
