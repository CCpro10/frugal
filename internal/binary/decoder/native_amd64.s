// +build !noasm !appengine
// Code generated by asm2asm, DO NOT EDIT.

#include "go_asm.h"
#include "funcdata.h"
#include "textflag.h"

TEXT Â·__native_entry__(SB), NOSPLIT, $0
	NO_LOCAL_POINTERS
	LONG $0xf9058d48; WORD $0xffff; BYTE $0xff // leaq         $-7(%rip), %rax
	MOVQ AX, 8(SP)
	RET

_do_skip:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5741                               // pushq        %r15
	WORD $0x5641                               // pushq        %r14
	WORD $0x5541                               // pushq        %r13
	WORD $0x5441                               // pushq        %r12
	BYTE $0x53                                 // pushq        %rbx
	SUBQ $4, SP
	MOVL $0, -44(BP)
	MOVL $0, 4(DI)
	MOVB CX, 0(DI)
	XORL R8, R8
	LONG $0xbe0d8d4c; WORD $0x0003; BYTE $0x00 // leaq         $958(%rip), %r9  /* LJTI0_0(%rip) */
	LEAQ -44(BP), R10
	LONG $0xf71d8d4c; WORD $0x0003; BYTE $0x00 // leaq         $1015(%rip), %r11  /* _SkipSizeFixed(%rip) */
	XORL AX, AX
	LEAL 1(CX), BX
	CMPB BX, $16
	JBE  LBB0_1

LBB0_40:
	MOVBLZX CX, AX
	NOTQ    AX
	JMP     LBB0_47

LBB0_29:
	LEAQ  0(DI)(R14*8), AX
	ADDQ  $4, AX
	MOVL  4(DI)(R14*8), CX
	TESTL CX, CX
	LONG  $0xf1450f44      // cmovnel      %ecx, %r14d
	LONG  $0xc2440f49      // cmoveq       %r10, %rax
	ADDL  $-1, R14
	MOVL  R14, 0(AX)

LBB0_31:
	ADDQ  $-5, DX
	ADDL  $5, R8
	ADDQ  $5, SI
	MOVL  -44(BP), AX
	TESTL AX, AX
	JS    LBB0_41

LBB0_39:
	MOVBLZX 0(DI)(AX*8), CX
	LEAL    1(CX), BX
	CMPB    BX, $16
	JA      LBB0_40

LBB0_1:
	MOVL    AX, R14
	MOVBLZX BX, AX
	MOVLQSX 0(R9)(AX*4), AX
	ADDQ    R9, AX
	JMP     AX

LBB0_2:
	MOVBLZX CX, AX
	MOVBQSX 0(AX)(R11*1), AX
	SUBQ    AX, DX
	JL      LBB0_42
	LEAQ    0(DI)(R14*8), CX
	ADDQ    $4, CX
	MOVL    4(DI)(R14*8), BX
	TESTL   BX, BX
	LONG    $0xf3450f44      // cmovnel      %ebx, %r14d
	LONG    $0xca440f49      // cmoveq       %r10, %rcx
	ADDL    $-1, R14
	MOVL    R14, 0(CX)
	ADDL    AX, R8
	ADDQ    AX, SI
	MOVL    -44(BP), AX
	TESTL   AX, AX
	JNS     LBB0_39
	JMP     LBB0_41

LBB0_4:
	MOVQ    $-2, AX
	CMPQ    DX, $5
	JL      LBB0_47
	MOVBLZX 0(SI), R15
	MOVBLZX R15, R12
	LONG    $0x310d8d48; WORD $0x0004; BYTE $0x00 // leaq         $1073(%rip), %rcx  /* _WireTags(%rip) */
	CMPB    0(R12)(CX*1), $0
	JE      LBB0_45
	MOVL    1(SI), CX
	TESTL   CX, CX
	JE      LBB0_29
	BSWAPL  CX
	MOVBLSX 0(R12)(R11*1), BX
	TESTL   BX, BX
	JE      LBB0_30
	IMULL   BX, CX
	ADDL    $5, CX
	MOVLQSX CX, CX
	SUBQ    CX, DX
	JGE     LBB0_27
	JMP     LBB0_47

LBB0_9:
	MOVL    4(DI)(R14*8), CX
	TESTL   CX, CX
	MOVL    R14, BX
	WORD    $0x450f; BYTE $0xd9 // cmovnel      %ecx, %ebx
	ADDL    $-1, BX
	MOVBLZX 1(DI)(R14*8), R15
	MOVBLZX 2(DI)(R14*8), R12
	LEAQ    0(DI)(R14*8), AX
	ADDQ    $4, AX
	TESTL   CX, CX
	LONG    $0xc2440f49         // cmoveq       %r10, %rax
	MOVL    BX, 0(AX)
	MOVLQSX -44(BP), CX
	JE      LBB0_11
	TESTB   $1, 4(DI)(CX*8)
	MOVBLZX R15, AX
	MOVBLZX R12, R12
	LONG    $0xe0440f44         // cmovel       %eax, %r12d

LBB0_11:
	LEAL    1(CX), BX
	MOVL    BX, -44(BP)
	CMPL    CX, $65534
	JG      LBB0_46
	MOVLQSX BX, AX
	MOVB    R12, 0(DI)(AX*8)
	MOVL    $0, 4(DI)(AX*8)
	MOVL    -44(BP), AX
	TESTL   AX, AX
	JNS     LBB0_39
	JMP     LBB0_41

LBB0_13:
	MOVQ    $-2, AX
	CMPQ    DX, $4
	JL      LBB0_47
	MOVL    0(SI), CX
	BSWAPL  CX
	ADDL    $4, CX
	MOVLQSX CX, CX
	SUBQ    CX, DX
	JGE     LBB0_27
	JMP     LBB0_47

LBB0_15:
	MOVQ    $-2, AX
	TESTQ   DX, DX
	JLE     LBB0_47
	MOVBLZX 0(SI), R15
	TESTQ   R15, R15
	JE      LBB0_32
	LONG    $0x340d8d48; WORD $0x0003; BYTE $0x00 // leaq         $820(%rip), %rcx  /* _WireTags(%rip) */
	CMPB    0(R15)(CX*1), $0
	JE      LBB0_45
	MOVBQSX 0(R15)(R11*1), CX
	TESTQ   CX, CX
	JE      LBB0_36
	ADDQ    $3, CX
	SUBQ    CX, DX
	JGE     LBB0_28
	JMP     LBB0_47

LBB0_20:
	MOVQ    $-2, AX
	CMPQ    DX, $6
	JL      LBB0_47
	MOVBLZX 0(SI), R15
	MOVBLZX R15, CX
	MOVQ    $-1, AX
	LONG    $0xe21d8d48; WORD $0x0002; BYTE $0x00 // leaq         $738(%rip), %rbx  /* _WireTags(%rip) */
	CMPB    0(CX)(BX*1), $0
	JE      LBB0_47
	MOVBLZX 1(SI), R12
	MOVBLZX R12, R13
	CMPB    0(R13)(BX*1), $0
	JE      LBB0_47
	MOVL    2(SI), AX
	TESTL   AX, AX
	JE      LBB0_33
	BSWAPL  AX
	MOVBLSX 0(CX)(R11*1), CX
	TESTL   CX, CX
	JE      LBB0_34
	MOVBLZX 0(R13)(R11*1), BX
	TESTB   BX, BX
	JE      LBB0_34
	MOVBLSX BX, BX
	ADDL    CX, BX
	IMULL   AX, BX
	ADDL    $6, BX
	MOVLQSX BX, CX
	MOVQ    $-2, AX
	SUBQ    CX, DX
	JL      LBB0_47

LBB0_27:
	LEAQ  0(DI)(R14*8), AX
	ADDQ  $4, AX
	MOVL  4(DI)(R14*8), BX
	TESTL BX, BX
	LONG  $0xf3450f44      // cmovnel      %ebx, %r14d
	LONG  $0xc2440f49      // cmoveq       %r10, %rax
	ADDL  $-1, R14
	MOVL  R14, 0(AX)

LBB0_28:
	ADDL  CX, R8
	ADDQ  CX, SI
	MOVL  -44(BP), AX
	TESTL AX, AX
	JNS   LBB0_39
	JMP   LBB0_41

LBB0_30:
	MOVB R15, 0(DI)(R14*8)
	ADDL $-1, CX
	MOVL CX, 4(DI)(R14*8)
	JMP  LBB0_31

LBB0_32:
	LEAQ  0(DI)(R14*8), AX
	ADDQ  $4, AX
	MOVL  4(DI)(R14*8), CX
	TESTL CX, CX
	LONG  $0xf1450f44      // cmovnel      %ecx, %r14d
	LONG  $0xc2440f49      // cmoveq       %r10, %rax
	ADDL  $-1, R14
	MOVL  R14, 0(AX)
	ADDQ  $-1, DX
	ADDL  $1, R8
	ADDQ  $1, SI
	MOVL  -44(BP), AX
	TESTL AX, AX
	JNS   LBB0_39
	JMP   LBB0_41

LBB0_33:
	LEAQ  0(DI)(R14*8), AX
	ADDQ  $4, AX
	MOVL  4(DI)(R14*8), CX
	TESTL CX, CX
	LONG  $0xf1450f44      // cmovnel      %ecx, %r14d
	LONG  $0xc2440f49      // cmoveq       %r10, %rax
	ADDL  $-1, R14
	MOVL  R14, 0(AX)
	JMP   LBB0_35

LBB0_34:
	MOVB R15, 1(DI)(R14*8)
	MOVB R12, 2(DI)(R14*8)
	MOVB $-1, 0(DI)(R14*8)
	ADDL AX, AX
	ADDL $-1, AX
	MOVL AX, 4(DI)(R14*8)

LBB0_35:
	ADDQ  $-6, DX
	ADDL  $6, R8
	ADDQ  $6, SI
	MOVL  -44(BP), AX
	TESTL AX, AX
	JNS   LBB0_39
	JMP   LBB0_41

LBB0_36:
	CMPQ  DX, $4
	JL    LBB0_47
	LEAL  1(R14), AX
	MOVL  AX, -44(BP)
	CMPL  R14, $65534
	JG    LBB0_46
	MOVL  AX, AX
	MOVB  R15, 0(DI)(AX*8)
	MOVL  $0, 4(DI)(AX*8)
	ADDQ  $-3, DX
	ADDL  $3, R8
	ADDQ  $3, SI
	MOVL  -44(BP), AX
	TESTL AX, AX
	JNS   LBB0_39

LBB0_41:
	MOVLQSX R8, AX
	JMP     LBB0_47

LBB0_42:
	MOVQ $-2, AX
	JMP  LBB0_47

LBB0_45:
	MOVQ $-1, AX
	JMP  LBB0_47

LBB0_46:
	MOVQ $-3, AX

LBB0_47:
	ADDQ $4, SP
	BYTE $0x5b   // popq         %rbx
	WORD $0x5c41 // popq         %r12
	WORD $0x5d41 // popq         %r13
	WORD $0x5e41 // popq         %r14
	WORD $0x5f41 // popq         %r15
	BYTE $0x5d   // popq         %rbp
	RET

// .set L0_0_set_9, LBB0_9-LJTI0_0
// .set L0_0_set_40, LBB0_40-LJTI0_0
// .set L0_0_set_2, LBB0_2-LJTI0_0
// .set L0_0_set_13, LBB0_13-LJTI0_0
// .set L0_0_set_15, LBB0_15-LJTI0_0
// .set L0_0_set_20, LBB0_20-LJTI0_0
// .set L0_0_set_4, LBB0_4-LJTI0_0
LJTI0_0:
	LONG $0xfffffd4f // .long L0_0_set_9
	LONG $0xfffffc57 // .long L0_0_set_40
	LONG $0xfffffc57 // .long L0_0_set_40
	LONG $0xfffffcb2 // .long L0_0_set_2
	LONG $0xfffffcb2 // .long L0_0_set_2
	LONG $0xfffffcb2 // .long L0_0_set_2
	LONG $0xfffffc57 // .long L0_0_set_40
	LONG $0xfffffcb2 // .long L0_0_set_2
	LONG $0xfffffc57 // .long L0_0_set_40
	LONG $0xfffffcb2 // .long L0_0_set_2
	LONG $0xfffffc57 // .long L0_0_set_40
	LONG $0xfffffcb2 // .long L0_0_set_2
	LONG $0xfffffdc3 // .long L0_0_set_13
	LONG $0xfffffdec // .long L0_0_set_15
	LONG $0xfffffe3b // .long L0_0_set_20
	LONG $0xfffffcf3 // .long L0_0_set_4
	LONG $0xfffffcf3 // .long L0_0_set_4

_SkipSizeFixed:
	QUAD $0x0002000801010000; WORD $0x0004; BYTE $0x08 // .ascii 11, '\x00\x00\x01\x01\x08\x00\x02\x00\x04\x00\x08'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000; BYTE $0x00                       // .space 5, '\x00\x00\x00\x00\x00'

_WireTags:
	QUAD $0x0001000101010000; QUAD $0x0101010101010001 // .ascii 16, '\x00\x00\x01\x01\x01\x00\x01\x00\x01\x00\x01\x01\x01\x01\x01\x01'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

TEXT Â·__do_skip(SB), NOSPLIT | NOFRAME, $0 - 0
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -56(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_do_skip:
	LEAQ Â·__native_entry__+13(SB), AX // _do_skip
	JMP  AX

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry
